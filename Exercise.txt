Мы рассматриваем направленные ациклические графы (Directed Acyclic Graphs - DAGs),
состоящие из узлов двух типов:
• Физических точек (объектов типа Point) – это leaf nodes;
• Систем координат (объекты типа Origin) – это parent nodes.
Дугами графа (edges) являются связи между его узлами, которые определяются значениями
свойств «children» в родительских узлах. Эти значения содержат множества ссылок на узлы,
позиции которых отсчитываются относительно данного узла, и определяют исходящие дуги
графа. Оконечные узлы (физические точки) исходящих дуг не имеют.
Один и тот же узел графа (любого из двух типов) может присутствовать в наборах children
разных родительских узлов графа (иметь несколько входящих дуг графа). Смысл такого
присутствия узла означает его повторное использование (reuse) в нескольких разных контекстах.
Однако, циклы в графе не допускаются. Мы это требуем для того, чтобы можно было обойти все
его узлы за конечное число «проходов в глубину» по графу ссылок. Процесс обхода узлов графа
в глубину мы называем траверсированием графа.
Весть наш граф (DAG) представлен объектом типа Space, который является корневым
родительским узлом графа и определяет для всего графа «мировую систему координат»,
относительно которой отсчитываются позиции всех остальных узлов.

В данном задании требуется реализовать описанные выше понятия в виде библиотеки, обеспечив
возможность построения произвольного DAG’а с использованием предоставленного и
реализованного API для создания объектов и манипулирования ими. При реализации допускается
расширение разрабатываемой библиотеки дополнительными необходимыми средствами.
В частности, необходимо:
1. Реализовать класс Coord2D с операциями, необходимыми для относительных
перемещений объектов Point и Origin.
2. Реализовать класс BoundBox c необходимыми операциями для их вычислений, как указано
выше.
3. Реализовать класс Point в соответствии с указанным выше описанием, имеющий properties:
• «position», тип значения Coord2D, getter и setter;
• «bounds», тип значения BoundBox, только getter.
4. Реализовать класс Origin в соответствии с указанным выше описанием, имеющий properties:
• «position», тип значения Coord2D, getter и setter;
• «bounds», тип значения BoundBox (с описанной выше семантикой);
• «children», тип значения – параметризация Set<…> для необходимых манипуляций с
наборами children;
Важно: все изменения в children должны контролироваться и не должны приводить
к появлению циклов в графе ссылок. При обнаружении нарушения ацикличности в
DAG необходимо генерировать exception (DAGConstraintException).
5. Реализовать класс Space как корневой узел DAG, определяющий мировую систему
координат.
6. Опционально, для получения оценки, превышающей оценку 8, реализовать утилитный
класс (DAGUtils) c методами:
• exportAsString (Space o) - для сериализации (сохранения состояния) DAG’а с
заданным корнем в строку;
• importFromString (String s) – для десериализации (восстановления состояния)
DAG’а из заданной строки.
Формат описания состояния графа в строке выбрать самостоятельно и задокументировать.